package com.projecteuler.puzzle;

import java.util.HashSet;
import java.util.Set;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * <p>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundreth divisors?
 */
public class HighlyDivisibleTriangularNumber {
    public static void main(String[] args) {
        int triangleNumber = 0;
        for (int i = 1; true; i++) {
            triangleNumber = triangleNumber + i;
            int noOfDivisor = divisorOfNumber(triangleNumber);
            if (noOfDivisor > 500) {
                System.out.println(triangleNumber);
                break;
            }
        }
    }

    public static int divisorOfNumber(int n) {
        final Set<Integer> divisor = new HashSet();
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                divisor.add(i);
            }
        }
        return divisor.size();
    }

    public static int factorOfNumber(int n) {
        final Set<Integer> factorial = new HashSet();
        int number = n;
        for (int i = 2; i <= number; i++) {
            while (number % i == 0) {
                number = number / i;
                factorial.add(i);
            }
        }
        System.out.println("Factorial of " + n + " is : " + factorial);
        return factorial.size();
    }
}
